
    // Programul de mai jos ar trebui sa ceara utilizatorului sa introduca o dimensiune initiala pentru un sir si apoi sa aloce memorie pentru acel sir.
    // Apoi, putem introduce sirul de caractere, acesta fiind stocat in memoria alocata anterior.
    // Putem alege o noua dimensiune,adaugand sau eliminand siruri, iar programul modifica memoria pentru a fi potrivita noului sir.
    // Daca este cazul, putem introduce sirurile suplimentare pentru noile spatii create, iar acestea vor fi adaugate in memoria realocata.
    // programul va afisa toate sirurile, iar in final, memoria alocata va fi eliberata.


#include <iostream>   //biblioteca pentru operatii de intrare/iesire
#include <cstdlib>
#include <cstring>

int main() {
    int size;
    std::cout << "Enter the initial size of the array: ";
    std::cin >> size;
    std::cin.ignore();


    char **arrMalloc = (char **)malloc(size * sizeof(char *));
    if (arrMalloc == nullptr) {
        std::cout << "Memory allocation failed using malloc!" << std::endl;
        return 1;
    }

    std::cout << "Memory allocated using malloc." << std::endl;


    std::cout << "Enter " << size << " strings:" << std::endl;
    for (int i = 0; i < size; i++) {         // "<" in loc de "<="; i++
        const int bufferSize = 100;
        arrMalloc[i] = (char *)malloc(bufferSize * sizeof(char));
        if (arrMalloc[i] == nullptr) {
            std::cout << "Memory allocation failed for string " << i << " using malloc!" << std::endl;

            for (int j = 0; j < i; j++) {
                free(arrMalloc[j]);
            }
            free(arrMalloc);    //se pune punct si virgula
            return 1;
        }
        std::cin.getline(arrMalloc[i], bufferSize);
    }

    int newSize;
    std::cout << "Enter the new size for reallocation: ";
    std::cin >> newSize;
    std::cin.ignore();


    char **arrRealloc = (char **)realloc(arrMalloc, newSize * sizeof(char *));
    if (arrRealloc == nullptr) {
        std::cout << "Memory reallocation failed using realloc!" << std::endl;

        for (int i = 0; i < size; i++) { // i va incepe de la 0, nu de la 1
            free(arrMalloc[i]);
        }
        free(arrMalloc);
        return 1;
    }

    std::cout << "Memory reallocated using realloc." << std::endl;

    std::cout << "Enter " << newSize - size << " more strings:" << std::endl;
    for (int i = size; i < newSize; i++) {
        const int bufferSize = 100;
        arrRealloc[i] = (char *)malloc(bufferSize * sizeof(char));
        if (arrRealloc[i] == nullptr) {   //adaugam pe [i] in conditie
            std::cout << "Memory allocation failed for string " << i << " using malloc!" << std::endl;

            for (int j = 0; j < i; ++j) {  // in loc de "," punem ";"
                free(arrRealloc[j]);
            }
            free(arrRealloc);
            return 1;
        }
        std::cin.getline(arrRealloc[i], bufferSize); // in c++ avem cin.getline, nu cingetline
    }


    std::cout << "Updated array of strings:" << std::endl;
    for (int i = 0; i < newSize; i++) {
        std::cout << arrRealloc[i] << std::endl;
    }

    for (int i = 0; i < newSize; i++) {      // "<" in loc de "<="
        free(arrRealloc[i]);
    }
    free(arrRealloc);

    return 0;
}

